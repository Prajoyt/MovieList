React is a Java Script Library for building User Interfaces
Why react?
1)it is composable means it is compnenent based which helps in code reusability
2) react is single page application same page we can create dynamically  run  efficiently.
3)


what are cdns?
 Content delivery network we can import all the functionality of a library w/o downloading it completely.
 

 ReactDOM.createRoot(document.getElementById('root')).render(reactHeading)
 in the above case reactDOm is a virtual Dom in the react

 virtualDOM:---is aprogramming concept where an ideal or virtual representation  of a UI is kept in a memory and synced with real DOM.

 Working of Virtual DOM
 1)  react will create the copy of an updated virtual dom 
 2)only changes that are made in vdom will be reflected by original dom.

3)It compares changes in virtualDOM to the RealDOm and only updates elements that have changed in realDOm.

 React came up with JavaScriptXML


it is the  syntax extension to JavaScript
it is syntaxtical sugar


const reactHeading= React.createElement('h1',{className:'reactHead'},'Hello React Element using react')
>>>>
converted into
{<h1>Hello React Element</h1>}


Each child in a list should have a unique "key" prop.

whenever there is array or list we have to provide it with a key 



what is a webpack==>>> it is a modular bundler


folder structure::
public==>>> index html file -->> these file will be loaded in the folder--->>> manifest json will have the moreinfo regarding the file


src file will be where we will build our application
we can delete everything except index.js beacuse webpacks have entry point in index.js if we delete it there will not be any dom formation
BEST WAY ==="DO NOT TOUCH index.js file"

constructor is used to initialse the state and bind the event handler


What is state 
State is an built in Object in React which helps us storing the data  about the Component
 state is ___>>Single source of truth

2)Whenever we need to update state we can change it using setstate() and also re render the component

addStars=()=>{
    
    //form1
    this.setState({
        stars:this.state.stars+0.5,
      })
//    this.state.stars+=0.5;
//    console.log('this',this.state.stars); -->not displaying on ui because it is not re rendering so we use setstate 
}

The setState method works in an asynchronous way. That means after calling
setState the this.state variable is not immediately changed.
So If we want to perform an action after the state value is updated we can pass a
callback function as a second parameter to the setState method
 this.setState((prevState) => {
      return {
        stars: prevState.stars + 0.5,
      };
    },()=>{console.log(this.state.stars,'callback inside ')});
    
    console.log(this.state.stars,'outside setStars');
0 outside setStars MovieCard.js:34
0.5 callback inside 


 concept of this
  this function is after constructor class 
   addStars(){
        console.log('this', this)
    } 
     o/p this, undefined  
     why? beacuse in react we do not call the function we pass a refernce

     so we need to  bind ItS
     onClick={this.addStars.bind(this)}
     this refers to the object (state)
     or we can create an arrow function because arrow function automatically binds to the current instances.


     In Moviecard there is data of local case but we need data of different movies so we will create
     Movie List in that we will call Movie Card1 to 3 as we have done  so now we will store movie data in movielist in form of array so if we call mc1 we should get data of movie 1 simialry for others
      now how to pass data from movielist to movie card that by using props.
       Information that gets passed from one component to another is known as props.A
component's props is an object which holds information about that component




Styling in React

Inline CSS is the widely preferred but less recommended way to style your website.
In React, you will write your style using the style attribute followed by = and then
CSS properties enclosed by double curly braces {{ }} instead of quotes 
const Navbar = () => {
return (
<div style={{display:"flex", justifyContent:"space-between"}}>

//it is an object we use coma  instead of semicolon it is n object
<span>Title of Navbar</span>
<span>
Cart Icon<sup>count</sup>
</span>
</div>
);
};
export default Navbar;


index.css has a global scope which can create a issue if same developers are working on it. and Hence it is better to use it in the comoponent


styled-components is a library for React that allows you to use
component-level styles in your application that are written with a mixture of
JavaScript and CSS using a technique called CSS-in-JS.

index.css has a global scope  styled component is local scope no className clashes


Now we want to change the  cartcount button but we cannot because props movie from parent to child  but the data is present in the sibling component MovieC





Lifecycle is the series of stages through which a component passes from the
beginning of its life until its death. The life of the React component starts when it is
born ( Created/Mounted) and ends when it is destroyed (Unmounted).


Different Phases of a Lifecycle
Different Phases of a component lifecycle are:
● Mounting: When a component is being created and inserted into the DOM.
● Updating: When a Component is being re-rendered due to any updates
made to its state or props.
● Unmounting: When it is destroyed/ removed from the DOM.
● Error Handling: When there is an error during rendering.

During the lifecycle of a component, certain methods are called at each phase where
we can execute some logic or perform a side-effect.
Side effects are actions that are not predictable because they are actions that are
performed with the "outside world."
For example: Using Browser APIs like localStorage, using the native DOM methods
instead of the ReactDOM, fetching the data from an API, and setting timeouts and
intervals.


Mounting Phase
These methods are called in the following sequence when an instance of a
component is being created:
● constructor()
● static getDerivedStateFromProps()
● render()
● componentDidMount()
constructor
● A special function that will get called whenever a new component is created.
● It can be used to initialize the state and bind the event handlers.
● This is the only place where the state can be modified directly. Everywhere
else state should be updated using the setState function (used to update the
state of a component).
● Avoid introducing any side effects/subscriptions in the constructor.


static getDerivedStateFromProps
● It is invoked right before the render function. This method is invoked in both
the mounting and updating phases.
● This method exists for rare use cases

render()
This is the only required method in the class component. render() executes
during both the mounting and updating phase of the component's lifecycle.
● It is used to render elements to the DOM by returning some JSX.
● The render() method must be a pure function, meaning it should not modify
the component's state, as when the state gets updated, the render method
gets automatically called, which could lead to infinite looping.
● render() will not be invoked if shouldComponentUpdate() returns false.


*******Setting the state or causing side effects in the above functionleeads to error,infinit loopsand undefined behaviour******
componentDidMount
● It is invoked after a component is mounted. (initially renders on the screen).
● This method is a good place to handle side effects like setting up
subscriptions and loading data from a remote endpoint.
● You can also use the setState function in this method to update the state.

